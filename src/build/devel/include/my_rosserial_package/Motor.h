// Generated by gencpp from file my_rosserial_package/Motor.msg
// DO NOT EDIT!


#ifndef MY_ROSSERIAL_PACKAGE_MESSAGE_MOTOR_H
#define MY_ROSSERIAL_PACKAGE_MESSAGE_MOTOR_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace my_rosserial_package
{
template <class ContainerAllocator>
struct Motor_
{
  typedef Motor_<ContainerAllocator> Type;

  Motor_()
    : speed(0)
    , direction(0)  {
    }
  Motor_(const ContainerAllocator& _alloc)
    : speed(0)
    , direction(0)  {
  (void)_alloc;
    }



   typedef int32_t _speed_type;
  _speed_type speed;

   typedef int32_t _direction_type;
  _direction_type direction;





  typedef boost::shared_ptr< ::my_rosserial_package::Motor_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::my_rosserial_package::Motor_<ContainerAllocator> const> ConstPtr;

}; // struct Motor_

typedef ::my_rosserial_package::Motor_<std::allocator<void> > Motor;

typedef boost::shared_ptr< ::my_rosserial_package::Motor > MotorPtr;
typedef boost::shared_ptr< ::my_rosserial_package::Motor const> MotorConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::my_rosserial_package::Motor_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::my_rosserial_package::Motor_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::my_rosserial_package::Motor_<ContainerAllocator1> & lhs, const ::my_rosserial_package::Motor_<ContainerAllocator2> & rhs)
{
  return lhs.speed == rhs.speed &&
    lhs.direction == rhs.direction;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::my_rosserial_package::Motor_<ContainerAllocator1> & lhs, const ::my_rosserial_package::Motor_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace my_rosserial_package

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::my_rosserial_package::Motor_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_rosserial_package::Motor_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_rosserial_package::Motor_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_rosserial_package::Motor_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_rosserial_package::Motor_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_rosserial_package::Motor_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::my_rosserial_package::Motor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c132692a08c074e6ae3270af166b3df3";
  }

  static const char* value(const ::my_rosserial_package::Motor_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc132692a08c074e6ULL;
  static const uint64_t static_value2 = 0xae3270af166b3df3ULL;
};

template<class ContainerAllocator>
struct DataType< ::my_rosserial_package::Motor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "my_rosserial_package/Motor";
  }

  static const char* value(const ::my_rosserial_package::Motor_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::my_rosserial_package::Motor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 speed\n"
"int32 direction\n"
"\n"
;
  }

  static const char* value(const ::my_rosserial_package::Motor_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::my_rosserial_package::Motor_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.speed);
      stream.next(m.direction);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Motor_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::my_rosserial_package::Motor_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::my_rosserial_package::Motor_<ContainerAllocator>& v)
  {
    s << indent << "speed: ";
    Printer<int32_t>::stream(s, indent + "  ", v.speed);
    s << indent << "direction: ";
    Printer<int32_t>::stream(s, indent + "  ", v.direction);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MY_ROSSERIAL_PACKAGE_MESSAGE_MOTOR_H
